AWSTemplateFormatVersion: '2010-09-09'
Description: 'MLEW Tracker one-click deployment with automatic build and deploy from GitHub'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "MLEW Tracker Deployment Parameters"
        Parameters:
          - Environment
          - NotificationEmailAddress
          - EventTtlDays
          - ApiThrottleBurstLimit
          - ApiThrottleRateLimit
          - ErrorAlarmThreshold
          - DurationAlarmThreshold

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name to use for deployment
  
  NotificationEmailAddress:
    Type: String
    Description: 'Email address to receive deployment notifications (Example: test@example.co.jp)'
    AllowedPattern: "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"
    ConstraintDescription: Must be a valid email address
  
  EventTtlDays:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 400
    Description: 'TTL for events in DynamoDB (days)'
  
  ApiThrottleBurstLimit:
    Type: Number
    Default: 5000
    MinValue: 0
    Description: 'API throttling burst limit'
  
  ApiThrottleRateLimit:
    Type: Number
    Default: 10000
    MinValue: 0
    Description: 'API throttling rate limit'
  
  ErrorAlarmThreshold:
    Type: Number
    Default: 100
    MinValue: 1
    Description: 'Error threshold for CloudWatch alarms'
  
  DurationAlarmThreshold:
    Type: Number
    Default: 10000
    MinValue: 1000
    Description: 'Duration threshold for CloudWatch alarms (milliseconds)'

Resources:

  # SNS Topic for deployment notifications
  DeploymentNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: MLEW Tracker Deployment Notifications
      TopicName: !Sub 'MLEWTracker-Notification-${AWS::StackName}'
      KmsMasterKeyId: 'alias/aws/sns'

  # SNS Subscription for email notifications
  DeploymentNotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref DeploymentNotificationTopic
      Endpoint: !Ref NotificationEmailAddress

  # IAM Role for CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AdministratorAccess"

  # IAM Policy for CodeBuild
  CodeBuildServiceRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: CodeBuildServiceRolePolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${MLEWTrackerDeploymentProject}:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${MLEWTrackerDeploymentProject}"
          - Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref DeploymentNotificationTopic
      Roles:
        - !Ref CodeBuildServiceRole

  # CodeBuild Project
  MLEWTrackerDeploymentProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub 'MLEWTracker-CodeBuild-${AWS::StackName}'
      Description: 'Builds and deploys MLEW Tracker application from GitHub'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
      Environment:
        Type: ARM_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux-aarch64-standard:3.0
        PrivilegedMode: false
        EnvironmentVariables:
          - Name: Environment
            Value: !Ref Environment
          - Name: EventTtlDays
            Value: !Ref EventTtlDays
          - Name: ApiThrottleBurstLimit
            Value: !Ref ApiThrottleBurstLimit
          - Name: ApiThrottleRateLimit
            Value: !Ref ApiThrottleRateLimit
          - Name: ErrorAlarmThreshold
            Value: !Ref ErrorAlarmThreshold
          - Name: DurationAlarmThreshold
            Value: !Ref DurationAlarmThreshold
          - Name: SNSTopicArn
            Value: !Ref DeploymentNotificationTopic
          - Name: DEPLOYMENT_STACK_NAME
            Value: !Ref AWS::StackName
      Source:
        Type: NO_SOURCE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 20
              commands:
                - echo "Starting MLEW Tracker deployment"
                - aws sns publish --topic-arn ${SNSTopicArn} --subject "MLEW Tracker Deployment Started" --message "Deployment of MLEW Tracker has started. You will receive another notification when deployment is complete."
                - echo "Cloning repository from GitHub..."
                - git clone https://github.com/aws-samples/aws-ml-enablement-workshop.git
                - echo "Repository cloned successfully"
            pre_build:
              commands:
                - echo "Current directory is $(pwd)"
                - echo "Installing dependencies in tracker directory..."
                - cd aws-ml-enablement-workshop/yourwork/tracker && npm ci
                - cd ${CODEBUILD_SRC_DIR}
                - echo "Verifying tracker workspace contents..."
                - ls -la aws-ml-enablement-workshop/yourwork/tracker/
                - echo "Available Lambda workspaces:"
                - ls -la aws-ml-enablement-workshop/yourwork/tracker/packages/lambdas/ || echo "Lambda directories not found"
            build:
              commands:
                - echo "Starting build phase..."
                - export TRACKER_DIR="${CODEBUILD_SRC_DIR}/aws-ml-enablement-workshop/yourwork/tracker"
                - echo "Tracker directory is $TRACKER_DIR"
                - cd $TRACKER_DIR
                - echo "Installing CDK dependencies..."
                - cd $TRACKER_DIR/cdk-app && npm ci --no-audit --no-fund
                - cd $TRACKER_DIR/cdk-app
                - |
                  echo "Synthesizing and deploying CDK stack..."
                  npx cdk deploy \
                    --require-approval never \
                    --context environment=${Environment} \
                    --context eventTtlDays=${EventTtlDays} \
                    --context apiThrottleBurstLimit=${ApiThrottleBurstLimit} \
                    --context apiThrottleRateLimit=${ApiThrottleRateLimit}
                - cd $TRACKER_DIR
                - STACK_NAME="MLEWTrackerStack-${Environment}"
                - echo "Fetching stack outputs for asset deployment..."
                - API_ENDPOINT=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text 2>/dev/null | tr -d '\r')
                - API_KEY_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='ApiKeyId'].OutputValue" --output text 2>/dev/null | tr -d '\r')
                - |
                  if [ "$API_KEY_ID" != "N/A" ] && [ ! -z "$API_KEY_ID" ]; then
                    API_KEY_VALUE=$(aws apigateway get-api-key --api-key $API_KEY_ID --include-value --query 'value' --output text 2>/dev/null | tr -d '\r')
                  else
                    API_KEY_VALUE=""
                  fi
                - DASHBOARD_BUCKET=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='DashboardBucketName'].OutputValue" --output text 2>/dev/null | tr -d '\r')
                - SDK_BUCKET=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SdkBucketName'].OutputValue" --output text 2>/dev/null | tr -d '\r')
                - DASHBOARD_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='DashboardURL'].OutputValue" --output text 2>/dev/null | tr -d '\r')
                - SDK_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SdkDistributionDomain'].OutputValue" --output text 2>/dev/null | tr -d '\r')
                - DASHBOARD_DISTRIBUTION_ID=$(aws cloudformation describe-stack-resources --stack-name $STACK_NAME --query "StackResources[?ResourceType=='AWS::CloudFront::Distribution' && LogicalResourceId=='DashboardDistribution'].PhysicalResourceId" --output text 2>/dev/null | tr -d '\r')
                - SDK_DISTRIBUTION_ID=$(aws cloudformation describe-stack-resources --stack-name $STACK_NAME --query "StackResources[?ResourceType=='AWS::CloudFront::Distribution' && LogicalResourceId=='SdkDistribution'].PhysicalResourceId" --output text 2>/dev/null | tr -d '\r')
                - |
                  cat <<EOF > packages/dashboard/.env.production
                  VITE_API_ENDPOINT=${API_ENDPOINT}
                  VITE_API_KEY=${API_KEY_VALUE}
                  VITE_ENVIRONMENT=${Environment}
                  VITE_AWS_REGION=${AWS_DEFAULT_REGION}
                  EOF
                - echo "Building dashboard package..."
                - npm run build --workspace=packages/dashboard
                - echo "Building tracker SDK package..."
                - npm run build --workspace=packages/tracker-sdk
                - |
                  if [ -d "packages/dashboard/dist" ] && [ ! -z "$DASHBOARD_BUCKET" ] && [ "$DASHBOARD_BUCKET" != "None" ]; then
                    echo "Uploading dashboard assets to s3://$DASHBOARD_BUCKET"
                    aws s3 sync packages/dashboard/dist/ s3://$DASHBOARD_BUCKET/ --delete
                    if [ ! -z "$DASHBOARD_DISTRIBUTION_ID" ] && [ "$DASHBOARD_DISTRIBUTION_ID" != "None" ]; then
                      echo "Creating CloudFront invalidation for dashboard distribution $DASHBOARD_DISTRIBUTION_ID"
                      aws cloudfront create-invalidation --distribution-id $DASHBOARD_DISTRIBUTION_ID --paths "/*"
                    fi
                  else
                    echo "Warning: Dashboard dist folder or bucket name missing"
                  fi
                - |
                  if [ -d "packages/tracker-sdk/dist" ] && [ ! -z "$SDK_BUCKET" ] && [ "$SDK_BUCKET" != "None" ]; then
                    echo "Uploading tracker SDK assets to s3://$SDK_BUCKET"
                    aws s3 sync packages/tracker-sdk/dist/ s3://$SDK_BUCKET/ --delete
                    if [ ! -z "$SDK_DISTRIBUTION_ID" ] && [ "$SDK_DISTRIBUTION_ID" != "None" ]; then
                      echo "Creating CloudFront invalidation for SDK distribution $SDK_DISTRIBUTION_ID"
                      aws cloudfront create-invalidation --distribution-id $SDK_DISTRIBUTION_ID --paths "/*"
                    fi
                  else
                    echo "Warning: Tracker SDK dist folder or bucket name missing"
                  fi
                - |
                  cat <<EOF > deployment_env.sh
                  STACK_NAME=$STACK_NAME
                  API_ENDPOINT=$API_ENDPOINT
                  API_KEY_ID=$API_KEY_ID
                  API_KEY_VALUE=$API_KEY_VALUE
                  DASHBOARD_BUCKET=$DASHBOARD_BUCKET
                  DASHBOARD_URL=$DASHBOARD_URL
                  SDK_BUCKET=$SDK_BUCKET
                  SDK_URL=$SDK_URL
                  EOF
            post_build:
              commands:
                - |
                  echo "Post-build phase started..."
                  TRACKER_DIR="${CODEBUILD_SRC_DIR}/aws-ml-enablement-workshop/yourwork/tracker"
                  cd $TRACKER_DIR
                  STACK_NAME_DEFAULT="MLEWTrackerStack-${Environment}"
                  if [ -f deployment_env.sh ]; then
                    . ./deployment_env.sh
                  fi
                  STACK_NAME=${STACK_NAME:-$STACK_NAME_DEFAULT}
                  API_ENDPOINT=${API_ENDPOINT:-$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='ApiEndpoint'].OutputValue" --output text 2>/dev/null | tr -d '\r')}
                  API_KEY_ID=${API_KEY_ID:-$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='ApiKeyId'].OutputValue" --output text 2>/dev/null | tr -d '\r')}
                  if [ -z "$API_KEY_VALUE" ] && [ ! -z "$API_KEY_ID" ] && [ "$API_KEY_ID" != "N/A" ]; then
                    API_KEY_VALUE=$(aws apigateway get-api-key --api-key $API_KEY_ID --include-value --query 'value' --output text 2>/dev/null | tr -d '\r')
                  fi
                  DASHBOARD_URL=${DASHBOARD_URL:-$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='DashboardURL'].OutputValue" --output text 2>/dev/null | tr -d '\r')}
                  SDK_URL=${SDK_URL:-$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SdkDistributionDomain'].OutputValue" --output text 2>/dev/null | tr -d '\r')}
                  FORMATTED_SDK_URL="N/A"
                  if [ ! -z "$SDK_URL" ] && [ "$SDK_URL" != "N/A" ]; then
                    FORMATTED_SDK_URL="https://${SDK_URL}/tracker-sdk.js"
                  fi
                  cat > deployment-info.txt << EOFMSG
                  MLEW Tracker Deployment Completed Successfully!
                  ================================================
                  Deployment Time: $(date '+%Y-%m-%d %H:%M:%S')

                  Access Information:
                  ----------------------
                  API Endpoint: ${API_ENDPOINT}
                  API Key: ${API_KEY_VALUE}
                  Dashboard URL: https://${DASHBOARD_URL}
                  Tracker SDK URL: ${FORMATTED_SDK_URL}

                  Stack Details:
                  -----------------
                  Stack Name: ${STACK_NAME}
                  Region: ${AWS_DEFAULT_REGION}

                  Next Steps:
                  --------------
                  1. Save the API Key shown above - you'll need it to access the API
                  2. Access the Dashboard URL to view analytics
                  3. Configure your applications to send events to the API Endpoint using the API Key

                  For CloudWatch Logs:
                  https://console.aws.amazon.com/cloudwatch/home?region=${AWS_DEFAULT_REGION}#logsV2:log-groups

                  For CloudFormation Stack:
                  https://console.aws.amazon.com/cloudformation/home?region=${AWS_DEFAULT_REGION}#/stacks/stackinfo?stackId=${STACK_NAME}
                  EOFMSG
                  echo "Sending completion notification..."
                  aws sns publish --topic-arn "${SNSTopicArn}" --subject "MLEW Tracker Deployment Complete" --message file://deployment-info.txt
                  echo "Deployment completed successfully!"
          artifacts:
            files:
              - deployment-info.txt
      TimeoutInMinutes: 60

  # Custom Resource to trigger CodeBuild
  DeploymentTrigger:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt TriggerFunction.Arn
      ProjectName: !Ref MLEWTrackerDeploymentProject
      ServiceTimeout: 600

  # Lambda function for the Custom Resource
  TriggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt TriggerFunctionRole.Arn
      Runtime: nodejs20.x
      Timeout: 30
      Code:
        ZipFile: |
          const { CodeBuildClient, StartBuildCommand } = require('@aws-sdk/client-codebuild');
          const response = require('cfn-response');

          exports.handler = async (event, context) => {
            console.log('Event:', JSON.stringify(event, null, 2));
            
            const physicalResourceId = `CodeBuildTrigger-${event.ResourceProperties.ProjectName}`;
            const responseData = {};
            
            try {
              const codebuild = new CodeBuildClient({ 
                region: process.env.AWS_REGION,
                maxAttempts: 3
              });

              if (event.RequestType === 'Create' || event.RequestType === 'Update') {
                const command = new StartBuildCommand({ 
                  projectName: event.ResourceProperties.ProjectName 
                });
                const result = await codebuild.send(command);
                responseData.BuildId = result.build.id;
              }
              
              await response.send(event, context, response.SUCCESS, responseData, physicalResourceId);
            } catch (error) {
              console.error('Error:', error);
              await response.send(event, context, response.FAILED, { Error: error.message }, physicalResourceId);
            }
          };

  # IAM Role for Lambda Trigger Function
  TriggerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: CodeBuildStartPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codebuild:StartBuild
                Resource: !GetAtt MLEWTrackerDeploymentProject.Arn

Outputs:
  NotificationTopicArn:
    Description: ARN of the SNS topic for deployment notifications
    Value: !Ref DeploymentNotificationTopic
  
  CodeBuildProjectName:
    Description: Name of the CodeBuild project
    Value: !Ref MLEWTrackerDeploymentProject
  
  CodeBuildLogGroup:
    Description: CloudWatch Logs group for CodeBuild logs
    Value: !Sub '/aws/codebuild/${MLEWTrackerDeploymentProject}'
  
  DeploymentStatus:
    Description: Deployment status information
    Value: !Sub "Deployment has been initiated. You will receive an email notification at ${NotificationEmailAddress} when the deployment is complete."
